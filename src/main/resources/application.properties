# exposing the API. By default, a request to /q/openapi will serve the combined OpenAPI document from the static file
# and the model generated from application endpoints code
quarkus.smallrye-openapi.path=/q/openapi

quarkus.log.min-level=TRACE

# DB datasource configuration
%dev.quarkus.datasource.db-kind=mysql
%dev.quarkus.datasource.username=root
%dev.quarkus.datasource.password=123qweASD
%dev.quarkus.datasource.jdbc.url=jdbc:mysql://localhost:3306/example_app

# drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation=drop-and-create

# Quarkus Kafka configurations
quarkus.kafka.devservices.enabled=false
kafka.bootstrap-servers=localhost:9092
quarkus.kafka-streams.application-id=example-app
quarkus.kafka-streams.bootstrap-servers=localhost:9092
quarkus.kafka-streams.application-server=localhost:8080
quarkus.kafka-streams.schema-registry-url=http://localhost:8081
quarkus.kafka-streams.schema-registry-key=schema.registry.url
quarkus.kafka-streams.topics=topic.operation-context,topic.operation-status,topic.operation-unit-status

# Configuration of smallrye channels
mp.messaging.connector.smallrye-kafka.schema.registry.url=http://localhost:8081

mp.messaging.outgoing.operation-context.connector=smallrye-kafka
mp.messaging.outgoing.operation-context.topic=topic.operation-context
mp.messaging.outgoing.operation-context.schema.registry.url=${quarkus.kafka-streams.schema-registry-url}
mp.messaging.outgoing.operation-context.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

mp.messaging.outgoing.operation-status.connector=smallrye-kafka
mp.messaging.outgoing.operation-status.topic=topic.operation-status
mp.messaging.outgoing.operation-status.schema.registry.url=${quarkus.kafka-streams.schema-registry-url}
mp.messaging.outgoing.operation-status.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

mp.messaging.outgoing.operation-unit-status.connector=smallrye-kafka
mp.messaging.outgoing.operation-unit-status.topic=topic.operation-unit-status
mp.messaging.outgoing.operation-unit-status.schema.registry.url=${quarkus.kafka-streams.schema-registry-url}
mp.messaging.outgoing.operation-unit-status.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

# Configuration of Kafka streams, producers and consumers
kafka-streams.default.deserialization.exception.handler=com.example.app.exception.DispatcherDeserializationExceptionHandler
kafka-streams.default.production.exception.handler=com.example.app.exception.DispatcherProductionExceptionHandler
kafka-streams.processing.guarantee=exactly_once_v2
kafka-streams.topology.optimization=all
kafka-streams.cache.max.bytes.buffering=10240
kafka-streams.commit.interval.ms=1000
kafka-streams.metadata.max.age.ms=500
kafka-streams.auto.offset.reset=earliest
kafka-streams.metrics.recording.level=DEBUG
kafka-streams.producer.acks=all
kafka-streams.consumer.isolation.level=read_committed
kafka-streams.consumer.max.poll.records=50
